import { Component } from '../component';
import tg from '../tag';
import core from './core';
import { text } from '../util';

class Button extends Component {
    setup(init) {
        if (init.attrs == null) {
            init.attrs = {};
        }
        
        if (init.attrs.type == null) {
            init.attrs.type = 'button';
        }
        
        this.kind = (init.kind  || 'primary').toLowerCase();
        this.tag = init.tag || tg.button;
        this.outline = init.outline == true;
        this.text = init.text || '';
    }
    
    render() {
        var classPrefix = 'btn-';
        if (this.outline) {
            classPrefix = 'btn-outline-';
        }

        return this.tag({
            text: this.text,
            class: 'btn ' + classPrefix + this.kind,
        });
    }
}

class SimpleBootstrapComponent extends Component {
    constructor(bootstrapName, init={}, config={}) {
        super(init);

        this.bootstrapName = bootstrapName;

        this.config = config;
        
        this.tag = init.tag || (config.tag || tg.div);
        this.text = init.text || '';
        this.kind = (init.kind || 'primary').toLowerCase();
        
        config.classOptions = config.classOptions || [];
        config.attrs = config.attrs || [];    
    }
    
    addClassOptions(className) {
        for (const option of this.config.classOptions) {
            if (this.init[option[0]] == true) {
                className += ' ' + option[1];
            }
        }
        return className;
    }
    
    render() {
        var classPrefix = this.this.bootstrapName + '-';

        let className = this.this.bootstrapName + ' ' + classPrefix + this.this.kind;

        className = this.this.addClassOptions(className);
        let tagInit = {
            class: className,
            text: this.this.text,
        };
        
        for (const attr in this.this.config.attrs) {
            tagInit[attr] = this.this.config.attrs[attr];
        }
        return this.this.tag(tagInit);
    }
}

class Alert extends SimpleBootstrapComponent {
    constructor(init) {
        super('alert', init, {});
    }
}

class Badge extends SimpleBootstrapComponent {
    constructor(init) {
        super('badge', init, {
            tag: tg.span,
            classOptions: [
                ['pill', 'badge-pill']
            ]
        });
    }
}

class Dropdown extends Component {
    setup(init) {
        this.options = init.options || [];
        this.button = init.button || new Button({ kind: 'secondary' });
    }

    activate() {
        $(this).dropdown();
    }
    
    render() {
        this.button.init.class = 'dropdown-toggle';
        this.button.init.attrs = {
            'data-toggle': 'dropdown',
            'aria-haspopup': 'true',
            'aria-expanded': 'false',                                        
        };
        
        var options = [];
        for (var i=0; i<this.options.length; ++i) {
            var option = this.options[i];
            options.push(tg.a({
                class: 'dropdown-item',
                text: text(option),
                attrs: {
                    href: '#'
                }
            }));
        }
        
        var dropdown = tg.div({
            class: 'dropdown',
            children: [
                this.button,
                tg.div({
                    class: 'dropdown-menu',
                    children: options
                })
            ]
        });
        return dropdown;
    }
}

class Container extends Component {
    setup(children=[]) {
        this.children = children;
    }
    
    render() {
        return tg.div({
            class: 'container',
            children: this.children,
        });
    }
}

class FluidContainer extends Component {
    setup(children=[]) {
        this.children = children;
    }
    
    render() {
        return tg.div({
            class: 'fluid-container',
            children: this.children,
        });
    }
}

class Navbar extends Component {
    setup(init) {
        this.links = init.links || [];
    }
    
    render() {
        const links = [];
        for (const link of this.links) {
            link.extend({
                class: 'nav-link',
            });
            links.push(tg.li({
                class: 'nav-item active',
                children: [
                    link
                ]
            }));
        }
        
        return tg.tag('nav', {
            class: 'navbar navbar-expand-lg navbar-light bg-light',
            children: [
                new core.Link({
                    text: 'App name',
                    to: '/',
                    class: 'navbar-brand',
                }),
                tg.button({
                    class: 'navbar-toggler',
                    type: 'button',
                    attrs: {
                        'data-toggle': 'collapse',
                        'data-target': '#navbarSupportedContent',
                        'aria-controls': 'navbarSupportedContent',
                        'aria-expanded': 'false',
                        'aria-label': 'Toggle navigation',
                    },
                    children: [
                        tg.span({
                            class: 'navbar-toggler-icon',
                        })
                    ]
                }),

                tg.div({
                    class: 'collapse navbar-collapse',
                    id: 'navbarSupportedContent',
                    children: [
                        tg.ul({
                            class: 'navbar-nav mr-auto',
                            children: links,
                        })
                    ]
                })
            ]
        });
    }
}

export default {
    Button,
    Alert,
    Badge,
    Dropdown,
    Navbar,
};

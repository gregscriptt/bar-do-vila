import { Component } from '../component';
import tag from '../tag';
import { text } from '../util';

class Accordion extends Component {
    setup(init) {
        this.sections = init.sections || [];
    }
    
    activate() {
        // should probably just make all refs a list? IDK
        var doIt = (accordion, panel) => {
            accordion.addEventListener('click', () => {
                accordion.classList.toggle('active');
                if (panel.style.display === 'block') {
                    panel.style.display = 'none';
                } else {
                    panel.style.display = 'block';
                }
            });
        };

        if (this.sections.length > 1) {
            for (let i=0; i<this.refs.accordion.length; ++i) {
                const accordion = this.refs.accordion[i];
                const panel = this.refs.panel[i];                
                doIt(accordion, panel);
            }
        } else {
            doIt(this.refs.accordion[0], this.refs.panel[0]);
        }
    }
    
    render() {
        var sections = [];
        for (const section of this.sections) {
            var body = text(section);

            // todo make this into a helper
            if (typeof(body) === 'object') {
                body = tag.p([
                    body
                ]);
            } else {
                body = tag.p(body);
            }
            
            sections.push(tag.div({
                children: [
                    tag.button({
                        text: section.title,
                        class: 'accordion',
                    }),
                    tag.div({
                        class: 'panel',
                        children: [
                            body
                        ],
                    })
                ]
            }));
        }
        
        return tag.div({
            children: sections,
        });
    }

    style() {
        return '.accordion {    background-color: #eee;    color: #444;    cursor: pointer;    padding: 18px;    width: 100%;    text-align: left;    border: none;    outline: none;    transition: 0.4s;}' + 
            '.active, .accordion:hover {    background-color: #ccc;}' + 
            '.panel {    padding: 0 18px;    background-color: white;    display: none;    overflow: hidden;}';
    }
}

class Timer extends Component {
    setup(init) {
        this.title = init.title || 'Timer';
        this.interval = init.interval || 1000;
        this.time = 0;
    }

    activate() {
        this.time = 0;
        const loop = () => {
            this.time += 1;
            this.refs.time.innerHTML = this.time;
            setTimeout(loop, this.interval);
        };
        loop();
    }

    render() {
        return tag.div({
            class: 'timer',
            text: this.title,
            children: [
                tag.span({
                    id: 'time',
                    text: this.time
                })
            ]
        });
    }

    style() {
        return '.timer { background-color: lightgray; height: 100px; width: 100px; }';
    }
}

export default {
    Accordion,
    Timer,
};

export const tg = tag;

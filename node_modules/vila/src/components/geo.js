import { Component } from '../component.js';
import tg from '../tag';
import { text } from '../util';

// should be able to change "this.radius" from onclick and have it update the size of the
// ball/rectangle
class Ball extends Component {
    setup(init) {
        this.radius = init.radius || 100;
        if (init.color) {
            this.innerColor = init.color;
        } else {
            this.innerColor = init.innerColor || 'lightgray';
        }
        this.outerColor = init.outerColor || 'gray';
        this.borderWidth = init.borderWidth || 0;
        this.units = init.units || 'px';
    }

    render() {
        return tg.div({
            children: [
                tg.div({
                    ref: 'inner',
                    style: {
                        backgroundColor: this.innerColor,
                        height: this.radius - this.borderWidth + this.units,
                        width: this.radius - this.borderWidth + this.units,
                        borderRadius: this.radius + this.units,
                    }
                })
            ],
            ref: 'outer',
            style: {
                backgroundColor: this.outerColor,
                height: this.radius + this.units,
                width: this.radius + this.units,
                borderRadius: this.radius + this.units,
                paddingLeft: this.borderWidth + this.units,
                paddingTop: this.borderWidth + this.units,
            }
        });
    }
}

class Rectangle extends Component {
    setup(init) {
        this.width = init.width || 100;
        this.height = init.height || 100;        
        this.innerColor = init.innerColor || 'lightgray';
        this.outerColor = init.outerColor || 'gray';
        this.borderWidth = init.borderWidth || 0;        
        this.units = init.units || 'px';
    }

    render() {
        return tg.div({
            children: [
                tg.div({
                    ref: 'inner',
                    style: {
                        backgroundColor: this.innerColor,
                        height: this.height - this.borderWidth + this.units,
                        width: this.width - this.borderWidth + this.units,
                    }
                })
            ],
            ref: 'outer',
            style: {
                backgroundColor: this.outerColor,
                height: this.height + this.units,
                width: this.width + this.units,
                paddingLeft: this.borderWidth + this.units,
                paddingTop: this.borderWidth + this.units,
            }
        });
    }
}


class Triangle extends Component {
    setup(init) {
        this.width = init.width || 100;
        this.height = init.height || 100;        
        this.innerColor = init.innerColor || 'lightgray';
        this.outerColor = init.outerColor || 'gray';
        this.borderWidth = init.borderWidth || 0;        
        this.units = init.units || 'px';
    }

    render() {
        return tg.div({
            children: [
                tg.div({
                    ref: 'inner',
                    style: {
                        border: this.width/2 + this.units + ' solid',
                        borderLeftColor: 'transparent',
                        borderRightColor: 'transparent',
                        borderTop: 'none',
                        borderBottomColor: this.innerColor,
                        position: 'relative',

                        width: 0,
                        height: 0,
                    }
                })
            ],
            ref: 'outer',
            style: {
                border: this.width/2 + this.units + ' solid',
                borderLeftColor: 'transparent',
                borderRightColor: 'transparent',
                borderTop: 'none',
                borderBottomColor: this.outerColor,
                paddingLeft: this.borderWidth + this.units,
                paddingTop: this.borderWidth + this.units,
                position: 'relative',
                width: 0,
                height: 0,
            }
        });
    }
}

export default {
    Ball,
    Rectangle,
};

import util from './util';

export class Component {
    constructor(init={}) {
        this.state = { this:this };
        
        this.setup = this.setup.bind(this.state);
        this.style = this.style.bind(this.state);
        
        const oldRender = this.render.bind(this.state);
        const preRender = this.preRender.bind(this);
        const postRender = this.postRender.bind(this);
        this.render = function () {
            // don't render more than once
            if (this.node == null) {
                preRender();            
                this.tag = oldRender();
                postRender();
                this.activate = this.activate.bind(this.node);
                this.activate(this.node.refs);
            }
            return this.node;            
        };
        
        this.name = this.constructor.name;
        this.refs = {};
        this.ref = init.ref;
        this.init = init;
        
        window[this.name] = this;
    }

    style() {
        // can be overriden or can be set to a string
    }

    activate() {
        // "this" is the actual dom node
    }

    extend(moreInit) {
        util.mergeInits(this.init, moreInit);
    }

    setup() { // you can think of "this" as being bound to the actual HTML root node while in setup
    }

    preRender() {
        this.setup(this.init);
    }

    render() { // you can think of "this" as being bound to the actual HTML root node while in render
        // should override this in child classes
        // this should always return the node it is supposed to render (can be tag or HTMLDOMNode)
    }

    postRender() {
        // sometimes tag will be a Tag and sometimes it will be an HTMLDOMNode
        if (this.tag.init == null) {
            this.tag.init = {};
        }

        // sometiems this will just put the init on to the HTMLDOMNode, we want it on the Tag object
        util.mergeInits(this.tag.init, this.init);
        
        // things to pass to html tags before rendering:
        if (this.init.onclick) {
            this.tag.onclick = this.init.onclick;
        }

        if (this.init.onchange) {
            this.tag.onchange = this.init.onchange;
        }

        this.node = this.tag.render();

        if (this.ref) {
            this.refs[this.ref] = this.node;
        }

        for (const key in this.state) {
            if (key !== 'this' && key !== 'rows' && key !== 'children') { // should produce error message for illegal attributes on DOM nodes like "rows"
                this.node[key] = this.state[key];
            }
        }

        if (typeof this.style === 'function') {
            var style = this.style();
            if (typeof style === 'string') {
                addStyle(style);
            } else if (typeof style === 'object') {
                for (const key in style) {
                    this.node.style[key] = style[key];
                }
            }
        }

        return this.node;
    }
}

function addStyle(str) {
    var node = document.createElement('style');
    node.innerHTML = str;
    document.head.appendChild(node);
}

